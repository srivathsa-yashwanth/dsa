
"""Given a word, write a function to generate all of its unique generalized abbreviations.

Generalized abbreviation of a word can be generated by replacing each substring of the word by the count of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. After replacing these substrings in the actual word by the count of characters we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”. """


def abbreviations(word):  # DFS, O(2**n * n), O(2**n * n)

    combos = []

    def generate(subset, i):

        if i == len(word):
            cur_set = []
            for ch in subset:
                if ch == '_':
                    if cur_set and cur_set[-1].isdigit() and int(cur_set[-1]) > 0:
                        cur_set.append(str(int(cur_set.pop())+1))
                    else:
                        cur_set.append('1')
                else:
                    cur_set.append(ch)

            combos.append(''.join(cur_set))
            return

        subset.append(word[i])
        generate(subset, i+1)
        subset.pop()

        subset.append('_')
        generate(subset, i+1)
        subset.pop()

    generate([], 0)

    return combos


if __name__ == '__main__':

    print(abbreviations('BAT'))
    # "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
    print(abbreviations('code'))
    # "code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2",
    # "2de", "2d1", "3e", "4"
